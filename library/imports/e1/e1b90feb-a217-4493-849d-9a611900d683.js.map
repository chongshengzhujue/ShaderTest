{"version":3,"sources":["../../../../assets/Script/assets/Script/Index.ts"],"names":[],"mappings":";;;;;AAAM,IAAA,kBAAqC,EAAnC,oBAAO,EAAE,sBAAQ,CAAmB;AAE5C,2CAA8C;AAG9C;IAAmC,yBAAY;IAD/C;QAAA,qEA+DC;QA3DC,iBAAW,GAAc,IAAI,CAAC;QAG9B,oBAAc,GAAY,IAAI,CAAC;QAG/B,cAAQ,GAAc,IAAI,CAAC;QAE3B,mBAAa,GAAc,EAAE,CAAC;QAC9B,eAAS,GAAgB,IAAI,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAClD,UAAI,GAAW,CAAC,CAAC;QACjB,oBAAc,GAAW,IAAI,CAAC;QAC9B,WAAK,GAAW,GAAG,CAAC;QACpB,qBAAe,GAAW,CAAC,CAAC;QAE5B,aAAO,GAAW,CAAC,CAAC;;IA4CtB,CAAC;IA1CC,qBAAK,GAAL;QACE,qBAAqB;QAErB,wCAAwC;QACxC,0DAA0D;QAC1D,IAAI;QAEJ,yBAAyB;QACzB,yBAAyB;QACzB,yBAAyB;QACzB,yBAAyB;QACzB,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,8BAAc,GAAd;QACE,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;QAEnC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QAChD,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;QACZ,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC;QACnC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;YAClB,IAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC7C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAChC,CAAC;QAED,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED,sBAAM,GAAN,UAAQ,EAAE;QACR,IAAI,CAAC,OAAO,IAAI,EAAE,GAAC,GAAG,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,GAAC,GAAG,CAAC;QAChC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/B,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACtE,0CAA0C;QAC1C,yCAAyC;QAEzC,oDAAoD;QACpD,2BAA2B;QAC3B,iDAAiD;QACjD,IAAI;IACN,CAAC;IA1DD;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;8CACU;IAG9B;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;iDACa;IAG/B;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;2CACO;IATR,KAAK;QADzB,OAAO;OACa,KAAK,CA8DzB;IAAD,YAAC;CA9DD,AA8DC,CA9DkC,EAAE,CAAC,SAAS,GA8D9C;kBA9DoB,KAAK","file":"","sourceRoot":"../../../../assets/Script","sourcesContent":["const { ccclass, property } = cc._decorator;\n\nimport ShaderUtils = require(\"./ShaderUtils\");\n\n@ccclass\nexport default class Index extends cc.Component {\n\n  @property(cc.Prefab)\n  blockPrefab: cc.Prefab = null;\n\n  @property(cc.Node)\n  foregroundNode: cc.Node = null;\n\n  @property(cc.Sprite)\n  bgSprite: cc.Sprite = null;\n\n  templateQueue: cc.Node[] = [];\n  blockPool: cc.NodePool = new cc.NodePool('block');\n  wave: number = 0;\n  templateHeight: number = 1334;\n  speed: number = 600;\n  createBlockFlag: number = 0;\n\n  bgMoveY: number = 0;\n\n  start() {\n    // let initCount = 6;\n\n    // for (let i = 0; i < initCount; ++i) {\n    //   this.blockPool.put(cc.instantiate(this.blockPrefab));\n    // }\n\n    // this.createNewBlock();\n    // this.createNewBlock();\n    // this.createNewBlock();\n    // this.createNewBlock();\n    ShaderUtils.setShader(this.bgSprite, \"uv\");\n  }\n\n  createNewBlock() {\n    const block = this.blockPool.get();\n\n    block.y = this.templateHeight * (this.wave - 2);\n    block.x = 0;\n    block.parent = this.foregroundNode;\n    this.templateQueue.push(block);\n    if (this.wave > 4) {\n      const reuseNode = this.templateQueue.shift();\n      this.blockPool.put(reuseNode);\n    }\n\n    this.wave++;\n  }\n\n  update (dt) {\n    this.bgMoveY += dt*0.2;\n    this.bgMoveY = this.bgMoveY%1.0;\n    ShaderUtils.use(this.bgSprite);\n    ShaderUtils.setUniformIf(this.bgSprite, \"u_frameMoveY\", this.bgMoveY);\n    // this.foregroundNode.y -= this.speed*dt;\n    // this.createBlockFlag += this.speed*dt;\n\n    // if (this.createBlockFlag > this.templateHeight) {\n    //   this.createNewBlock();\n    //   this.createBlockFlag -= this.templateHeight;\n    // }\n  }\n}\n"]}