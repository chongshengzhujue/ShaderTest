{"version":3,"sources":["../../../../assets/Script/assets/Script/ShaderUtils.js"],"names":["ShaderUtils","shaderPrograms","setShader","sprite","shaderName","glProgram","cc","GLProgram","vert","require","js","formatStr","frag","initWithString","sys","isNative","initWithVertexShaderByteArray","addAttribute","macro","ATTRIBUTE_NAME_POSITION","VERTEX_ATTRIB_POSITION","ATTRIBUTE_NAME_COLOR","VERTEX_ATTRIB_COLOR","ATTRIBUTE_NAME_TEX_COORD","VERTEX_ATTRIB_TEX_COORDS","link","updateUniforms","_sgNode","setShaderProgram","setUniformIf","name","value","getShaderProgram","glProgram_state","GLProgramState","getOrCreateWithGLProgram","setUniformFloat","setUniformLocationWith1f","use","programState","getGLProgramState","module","exports"],"mappings":";;;;;;AACA,IAAIA,cAAc;AACdC,oBAAgB,EADF;;AAGdC,eAAW,mBAASC,MAAT,EAAiBC,UAAjB,EAA6B;AACpC,YAAIC,YAAY,KAAKJ,cAAL,CAAoBG,UAApB,CAAhB;AACA,YAAI,CAACC,SAAL,EAAgB;AACZA,wBAAY,IAAIC,GAAGC,SAAP,EAAZ;AACA,gBAAIC,OAAOC,QAAQH,GAAGI,EAAH,CAAMC,SAAN,CAAgB,SAAhB,EAA2BP,UAA3B,CAAR,CAAX;AACA,gBAAIQ,OAAOH,QAAQH,GAAGI,EAAH,CAAMC,SAAN,CAAgB,SAAhB,EAA2BP,UAA3B,CAAR,CAAX;AACAC,sBAAUQ,cAAV,CAAyBL,IAAzB,EAA+BI,IAA/B;AACA,gBAAI,CAACN,GAAGQ,GAAH,CAAOC,QAAZ,EAAsB;AAClBV,0BAAUW,6BAAV,CAAwCR,IAAxC,EAA8CI,IAA9C;AACAP,0BAAUY,YAAV,CAAuBX,GAAGY,KAAH,CAASC,uBAAhC,EAAyDb,GAAGY,KAAH,CAASE,sBAAlE;AACAf,0BAAUY,YAAV,CAAuBX,GAAGY,KAAH,CAASG,oBAAhC,EAAsDf,GAAGY,KAAH,CAASI,mBAA/D;AACAjB,0BAAUY,YAAV,CAAuBX,GAAGY,KAAH,CAASK,wBAAhC,EAA0DjB,GAAGY,KAAH,CAASM,wBAAnE;AACH;AACDnB,sBAAUoB,IAAV;AACApB,sBAAUqB,cAAV;AACA,iBAAKzB,cAAL,CAAoBG,UAApB,IAAkCC,SAAlC;AACH;AACDF,eAAOwB,OAAP,CAAeC,gBAAf,CAAgCvB,SAAhC;AACH,KArBa;;AAuBdwB,gBAvBc,wBAuBD1B,MAvBC,EAuBO2B,IAvBP,EAuBaC,KAvBb,EAuBoB;AAC9B,YAAI1B,YAAYF,OAAOwB,OAAP,CAAeK,gBAAf,EAAhB;;AAEA,YAAI3B,SAAJ,EAAe;AACX,gBAAIC,GAAGQ,GAAH,CAAOC,QAAX,EAAqB;AACjB,oBAAMkB,kBAAkB3B,GAAG4B,cAAH,CAAkBC,wBAAlB,CAA4C9B,SAA5C,CAAxB;AACA4B,gCAAgBG,eAAhB,CAAiCN,IAAjC,EAAuCC,KAAvC;AACH,aAHD,MAGO;AACH;AACA1B,0BAAUgC,wBAAV,CAAmCP,IAAnC,EAAyCC,KAAzC;AACH;AACJ;AACJ,KAnCa;AAqCdO,OArCc,eAqCVnC,MArCU,EAqCF;AACR,YAAIE,YAAYF,OAAOwB,OAAP,CAAeK,gBAAf,EAAhB;AACA3B,kBAAUiC,GAAV;;AAEA,YAAIhC,GAAGQ,GAAH,CAAOC,QAAX,EACA;AACI,gBAAIwB,eAAepC,OAAOwB,OAAP,CAAea,iBAAf,EAAnB;AACA,gBAAID,YAAJ,EAAkB,CAEjB;AACJ;AACJ;AAhDa,CAAlB;;AAmDAE,OAAOC,OAAP,GAAiB1C,WAAjB","file":"ShaderUtils.js","sourceRoot":"../../../../assets/Script","sourcesContent":["\nvar ShaderUtils = {\n    shaderPrograms: {},\n\n    setShader: function(sprite, shaderName) {\n        var glProgram = this.shaderPrograms[shaderName];\n        if (!glProgram) {\n            glProgram = new cc.GLProgram();\n            var vert = require(cc.js.formatStr(\"%s.vert\", shaderName));\n            var frag = require(cc.js.formatStr(\"%s.frag\", shaderName));\n            glProgram.initWithString(vert, frag);\n            if (!cc.sys.isNative) {  \n                glProgram.initWithVertexShaderByteArray(vert, frag);\n                glProgram.addAttribute(cc.macro.ATTRIBUTE_NAME_POSITION, cc.macro.VERTEX_ATTRIB_POSITION);  \n                glProgram.addAttribute(cc.macro.ATTRIBUTE_NAME_COLOR, cc.macro.VERTEX_ATTRIB_COLOR);  \n                glProgram.addAttribute(cc.macro.ATTRIBUTE_NAME_TEX_COORD, cc.macro.VERTEX_ATTRIB_TEX_COORDS);  \n            }\n            glProgram.link();  \n            glProgram.updateUniforms();\n            this.shaderPrograms[shaderName] = glProgram;\n        }\n        sprite._sgNode.setShaderProgram(glProgram);\n    },\n\n    setUniformIf(sprite, name, value) {\n        let glProgram = sprite._sgNode.getShaderProgram();\n\n        if (glProgram) {\n            if (cc.sys.isNative) {\n                const glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram( glProgram );\n                glProgram_state.setUniformFloat( name, value);\n            } else {\n                //let location = glProgram.getUniformLocationForName(name);\n                glProgram.setUniformLocationWith1f(name, value);\n            }\n        }\n    },\n\n    use(sprite) {\n        let glProgram = sprite._sgNode.getShaderProgram();\n        glProgram.use();\n\n        if (cc.sys.isNative)\n        {\n            let programState = sprite._sgNode.getGLProgramState();\n            if (programState) {\n                \n            }\n        }\n    }\n};\n\nmodule.exports = ShaderUtils;"]}